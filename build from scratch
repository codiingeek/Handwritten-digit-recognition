import tensorflow as tf

from tensorflow.examples.tutorials.mnist import input_data
mnist = input_data.read_data_sets("/tmp/data", one_hot = True) 

n_hl1 = 500
n_hl2 = 500
n_hl3 = 500
classes = 10
batch_size = 100

x = tf.placeholder('float',[None, 784])#flattening in the input data set
y = tf.placeholder('float') 

def neuralnet(data):
    #(input data*weight)+biases
    hl1 = {'weights':tf.Variable(tf.random_normal([784, n_hl1])),
           'biases':tf.Variable(tf.random_normal([n_hl1]))}
    
    hl2 = {'weights':tf.Variable(tf.random_normal([n_hl1, n_hl2])),
           'biases':tf.Variable(tf.random_normal([n_hl2]))}
    
    hl3 = {'weights':tf.Variable(tf.random_normal([n_hl2, n_hl3])),
           'biases':tf.Variable(tf.random_normal([n_hl3]))}
                                
    output = {'weights':tf.Variable(tf.random_normal([n_hl3, classes])),
           'biases':tf.Variable(tf.random_normal([classes]))}
        
        #(input data*weight)+biases
    l1 = tf.add(tf.matmul(data, hl1['weights']), hl1['biases'])
    l1 = tf.nn.relu(l1)

    l2 = tf.add(tf.matmul(l1, hl2['weights']), hl2['biases'])
    l2 = tf.nn.relu(l2)

    l3 = tf.add(tf.matmul(l2, hl3['weights']), hl3['biases'])
    l3 = tf.nn.relu(l3)

    out = tf.add(tf.matmul(l3, output['weights']), output['biases'])
    return out

def train_neuralnet(x):
    prediction = neuralnet(x)
    cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels = y,logits = prediction))
    optimizer = tf.train.AdamOptimizer().minimize(cost)

    hm_epochs = 10
    
    with tf.Session() as sess:
        sess.run(tf.initialize_all_variables())

        for epoch in range(hm_epochs):
            epoch_loss = 0
            for _ in range(int(mnist.train.num_examples/batch_size)):
                epoch_x, epoch_y = mnist.train.next_batch(batch_size)
                _, c = sess.run([optimizer, cost], feed_dict = {x: epoch_x, y: epoch_y} )
                epoch_loss += c
            print('Epoch',epoch,'completed out of',hm_epochs,'loss:',epoch_loss)
        correct = tf.equal(tf.argmax(prediction, 1), tf.argmax(y, 1))
        accuracy = tf.reduce_mean(tf.cast(correct, 'float'))
        print('Accuracy:', accuracy.eval({x:mnist.test.images, y:mnist.test.labels}))

train_neuralnet(x)
