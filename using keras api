import tensorflow as tf
mnist = tf.keras.datasets.mnist
(x_train, y_train),( x_test, y_test) = mnist.load_data()

# normalizing for better performance

x_train = tf.keras.utils.normalize(x_train, axis=1)
x_test = tf.keras.utils.normalize(x_test, axis=1)

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(128, activation = tf.nn.relu))
model.add(tf.keras.layers.Dense(128, activation = tf.nn.relu))
model.add(tf.keras.layers.Dense(10, activation = tf.nn.softmax))

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy',metrics = ['accuracy'])
model.fit(x_train,y_train,epochs=3)

v_loss, v_acc = model.evaluate(x_test, y_test)
print(v_loss, v_acc)

predict = model.predict([x_test])

import numpy as np
print(np.argmax(predict[0]))

import matplotlib.pyplot as plt
plt.imshow(x_train[0], cmap=plt.cm.binary)
plt.imshow(x_test[0])
